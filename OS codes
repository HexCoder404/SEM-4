//1. Explore usage of basic Linux Commands and system calls for file, directory and process management. ( Any 10 Commands)

ðŸ”¹ 1. ls â€” List Directory Contents
Usage:
bash
Copy
Edit
ls
ls -l
ls -a
Description: Lists files and directories in the current directory.
-l gives long listing format
-a shows hidden files (those starting with .)
ðŸ”¹ 2. cd â€” Change Directory
Usage:
bash
Copy
Edit
cd /home/user/Documents
cd ..
Description: Changes the current working directory.
.. moves up one level in the directory tree
ðŸ”¹ 3. mkdir â€” Make Directory
Usage:
bash
Copy
Edit
mkdir new_folder
Description: Creates a new directory named new_folder.
ðŸ”¹ 4. rmdir â€” Remove Directory
Usage:
bash
Copy
Edit
rmdir new_folder
Description: Deletes an empty directory.
(Use rm -r for non-empty ones.)
ðŸ”¹ 5. touch â€” Create a New File
Usage:
bash
Copy
Edit
touch file.txt
Description: Creates an empty file named file.txt.
ðŸ”¹ 6. rm â€” Remove Files or Directories
Usage:
bash
Copy
Edit
rm file.txt
rm -r folder_name
Description: Deletes files or directories.
-r is used for recursive deletion (folders and their contents)
ðŸ”¹ 7. cp â€” Copy Files or Directories
Usage:
bash
Copy
Edit
cp source.txt destination.txt
cp -r folder1/ folder2/
Description: Copies files or entire directories.
-r flag is used to copy directories recursively
ðŸ”¹ 8. mv â€” Move or Rename Files/Directories
Usage:
bash
Copy
Edit
mv oldname.txt newname.txt
mv file.txt /home/user/Documents/
Description: Moves or renames files and directories.
ðŸ”¹ 9. ps â€” Show Process Status
Usage:
bash
Copy
Edit
ps
ps aux
Description: Displays running processes.
aux shows all processes with detailed information
ðŸ”¹ 10. kill â€” Terminate a Process
Usage:
bash
Copy
Edit
kill 1234
kill -9 1234
Description: Sends a signal to terminate a process using its PID (e.g., 1234).
-9 forcefully kills the process

//2. Use shell script commands for the following - A. Display OS version, release number, kernel version
//B. Display top 10 processes in descending order
//C. Display processes with highest memory usage. D. Display current shell, home directory, operating system type, current path setting, and current working directory  E. Display current logged in user and log //name
#!/bin/bash

echo "===== A. OS Version, Release Number, Kernel Version ====="
uname -a
cat /etc/os-release

echo
echo "===== B. Top 10 Processes (Descending by CPU Usage) ====="
ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%cpu | head -n 11

echo
echo "===== C. Process Using Highest Memory ====="
ps -eo pid,ppid,cmd,%mem --sort=-%mem | head -n 6

echo
echo "===== D. Shell, Home Dir, OS Type, PATH, Current Dir ====="
echo "Current Shell: $SHELL"
echo "Home Directory: $HOME"
echo "OS Type: $(uname)"
echo "Current PATH Setting: $PATH"
echo "Current Working Directory: $(pwd)"

echo
echo "===== E. Current Logged In User and Logname ====="
echo "Logged in User: $USER"
echo "Logname: $(logname)"


//3. WAP in c to illustrate open system call.
#include <stdio.h>
#include <fcntl.h>
#include <errno.h>

int main() {
    // Try to open foo.txt in read-only mode, create it if it doesn't exist
    int fd = open("foo.txt", O_RDONLY | O_CREAT, 0644);

    printf("fd = %d\n", fd);

    if (fd == -1) {
        // print the error number
        printf("Error Number: %d\n", errno);
        // print the error description
        perror("Program");
    }

    return 0;
}


//4. WAP in c to illustrate close system calls
#include <stdio.h>
#include <fcntl.h>
#include <stdlib.h>  // For exit()

int main() {
    int fd1 = open("foo.txt", O_RDONLY);
    
    if (fd1 < 0) {
        perror("Open error");
        exit(1);
    }

    printf("Opened the file with fd = %d\n", fd1);

    // Properly close the file using close()
    if (close(fd1) < 0) {
        perror("Close error");
        exit(1);
    }

    printf("Closed the file descriptor successfully.\n");
    return 0;
}


//5. WAP in c to illustrate read system calls
#include <fcntl.h>   // for open()
#include <stdio.h>   // for printf()
#include <stdlib.h>  // for exit()
#include <unistd.h>  // for read(), close()

int main() {
    char c;
    int fd1 = open("foo.txt", O_RDONLY, 0);
    int fd2 = open("foo.txt", O_RDONLY, 0);

    if (fd1 < 0 || fd2 < 0) {
        perror("Failed to open file");
        exit(1);
    }

    // Read one byte from each file descriptor
    read(fd1, &c, 1);
    read(fd2, &c, 1);

    printf("c = %c\n", c);

    // Close file descriptors
    close(fd1);
    close(fd2);

    exit(0);
}



//6. WAP in c to illustrate write system call
#include <stdio.h>      // for printf(), perror()
#include <fcntl.h>      // for open() and flags
#include <unistd.h>     // for write(), close()
#include <stdlib.h>     // for exit()
#include <string.h>     // for strlen()

int main() {
    int sz;
    int fd = open("foo.txt", O_WRONLY | O_CREAT | O_TRUNC, 0644);

    if (fd < 0) {
        perror("Open failed");
        exit(1);
    }

    sz = write(fd, "hello geeks\n", strlen("hello geeks\n"));

    printf("Called write(%d, \"hello geeks\\n\", %lu). It returned %d\n",
           fd, strlen("hello geeks\n"), sz);

    close(fd);
    return 0;
}

//7. WAP in c to obtain the process id of both child n parent by using getpid abd getppid system call.
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>

int main() {
    pid_t pid;
    pid = fork();  // Create a new process

    if (pid == 0) {
        // Child process
        printf("Child Process:\n");
        printf("PID = %d\n", getpid());       // Child's PID
        printf("Parent PID = %d\n", getppid()); // Parent's PID
        exit(0);
    } 
    else if (pid > 0) {
        // Parent process
        printf("Parent Process:\n");
        printf("PID = %d\n", getpid());       // Parent's own PID
        printf("Child PID = %d\n", pid);      // Child's PID returned by fork()
    } 
    else {
        // Fork failed
        perror("Fork failed");
        exit(EXIT_FAILURE);
    }

    return 0;
}


//8. WAP in c to demonstrate waitpid 
#include <stdio.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <unistd.h>

void waitexample() {
    int i, stat;
    pid_t pid[5];

    // Creating 5 child processes
    for (i = 0; i < 5; i++) {
        if ((pid[i] = fork()) == 0) {
            sleep(1);                    // Simulate some work
            exit(100 + i);               // Each child exits with a unique status
        }
    }

    // Using waitpid() to wait for specific children and retrieve their exit status
    for (i = 0; i < 5; i++) {
        pid_t cpid = waitpid(pid[i], &stat, 0);
        if (WIFEXITED(stat)) {
            printf("Child with PID %d terminated with exit status: %d\n",
                   cpid, WEXITSTATUS(stat));
        }
    }
}

// Driver function
int main() {
    waitexample();
    return 0;
}


//9. non pre emptive priority scheduling 
#include <stdio.h>

int main() {
    int bt[20], p[20], wt[20], tat[20], pr[20];
    int i, j, n, total = 0, pos, temp;
    float avg_wt, avg_tat;

    printf("Enter Total Number of Processes: ");
    scanf("%d", &n);

    printf("\nEnter Burst Time and Priority for each process:\n");
    for (i = 0; i < n; i++) {
        printf("\nP[%d]\n", i + 1);
        printf("Burst Time: ");
        scanf("%d", &bt[i]);
        printf("Priority (Lower number = Higher priority): ");
        scanf("%d", &pr[i]);
        p[i] = i + 1; // Store process number
    }

    // Sort processes based on priority (Selection Sort)
    for (i = 0; i < n; i++) {
        pos = i;
        for (j = i + 1; j < n; j++) {
            if (pr[j] < pr[pos])
                pos = j;
        }

        // Swap priority
        temp = pr[i];
        pr[i] = pr[pos];
        pr[pos] = temp;

        // Swap burst time
        temp = bt[i];
        bt[i] = bt[pos];
        bt[pos] = temp;

        // Swap process number
        temp = p[i];
        p[i] = p[pos];
        p[pos] = temp;
    }

    // Calculate Waiting Time
    wt[0] = 0; // First process has no wait time
    for (i = 1; i < n; i++) {
        wt[i] = 0;
        for (j = 0; j < i; j++)
            wt[i] += bt[j];
        total += wt[i];
    }

    avg_wt = (float)total / n;
    total = 0;

    // Display results
    printf("\nProcess\t Burst Time\tPriority\tWaiting Time\tTurnaround Time\n");
    for (i = 0; i < n; i++) {
        tat[i] = bt[i] + wt[i];
        total += tat[i];
        printf("P[%d]\t\t%d\t\t%d\t\t%d\t\t%d\n", p[i], bt[i], pr[i], wt[i], tat[i]);
    }

    avg_tat = (float)total / n;

    printf("\nAverage Waiting Time = %.2f", avg_wt);
    printf("\nAverage Turnaround Time = %.2f\n", avg_tat);

    return 0;
}


//10. round robin
#include <stdio.h>

int main() {
    int i, limit, total = 0, x, counter = 0, time_quantum;
    int wait_time = 0, turnaround_time = 0;
    int arrival_time[10], burst_time[10], temp[10];
    float average_wait_time, average_turnaround_time;

    printf("Enter Total Number of Processes: ");
    scanf("%d", &limit);

    x = limit; // Number of remaining processes

    for(i = 0; i < limit; i++) {
        printf("\nEnter Details of Process[%d]\n", i + 1);
        printf("Arrival Time: ");
        scanf("%d", &arrival_time[i]);
        printf("Burst Time: ");
        scanf("%d", &burst_time[i]);
        temp[i] = burst_time[i]; // Store burst times in temp[]
    }

    printf("\nEnter Time Quantum: ");
    scanf("%d", &time_quantum);

    printf("\nProcess ID\tBurst Time\tTurnaround Time\tWaiting Time\n");

    for(total = 0, i = 0; x != 0;) {
        if(temp[i] <= time_quantum && temp[i] > 0) {
            total += temp[i];
            temp[i] = 0;
            counter = 1;
        }
        else if(temp[i] > 0) {
            temp[i] -= time_quantum;
            total += time_quantum;
        }

        if(temp[i] == 0 && counter == 1) {
            x--; // One process finished
            printf("Process[%d]\t\t%d\t\t%d\t\t%d\n", i + 1, burst_time[i],
                   total - arrival_time[i], total - arrival_time[i] - burst_time[i]);
            wait_time += total - arrival_time[i] - burst_time[i];
            turnaround_time += total - arrival_time[i];
            counter = 0;
        }

        // Check if all processes are visited
        if(i == limit - 1)
            i = 0;
        else if(arrival_time[i + 1] <= total)
            i++;
        else
            i = 0;
    }

    average_wait_time = (float)wait_time / limit;
    average_turnaround_time = (float)turnaround_time / limit;

    printf("\nAverage Waiting Time: %.2f", average_wait_time);
    printf("\nAverage Turnaround Time: %.2f\n", average_turnaround_time);

    return 0;
}


//11. producer consumer problem using semaphores
#include <stdio.h>
#include <stdlib.h>

int mutex = 1;
int full = 0;
int empty = 3; // Buffer size
int x = 0;     // Item counter

int wait(int s) {
    return (--s);
}

int signal(int s) {
    return (++s);
}

void producer() {
    mutex = wait(mutex);
    full = signal(full);
    empty = wait(empty);
    x++;
    printf("\nProducer produces the item %d", x);
    mutex = signal(mutex);
}

void consumer() {
    mutex = wait(mutex);
    full = wait(full);
    empty = signal(empty);
    printf("\nConsumer consumes item %d", x);
    x--;
    mutex = signal(mutex);
}

int main() {
    int n;

    printf("1. Producer\n2. Consumer\n3. Exit");

    while (1) {
        printf("\n\nEnter your choice: ");
        scanf("%d", &n);

        switch (n) {
            case 1:
                if ((mutex == 1) && (empty != 0))
                    producer();
                else
                    printf("\nBuffer is full!");
                break;

            case 2:
                if ((mutex == 1) && (full != 0))
                    consumer();
                else
                    printf("\nBuffer is empty!");
                break;

            case 3:
                exit(0);
                break;

            default:
                printf("\nInvalid choice!");
        }
    }

    return 0;
}


//12. deadlock using dining
#include <stdio.h>
#define n 4

int completedPhilo = 0, i;

struct fork {
    int taken;
} ForkAvail[n];

struct philosp {
    int left;
    int right;
} PhiloStatus[n];

void goForDinner(int philID) {
    // Already completed dinner
    if (PhiloStatus[philID].left == 10 && PhiloStatus[philID].right == 10) {
        printf("Philosopher %d already completed his dinner\n", philID + 1);
    }

    // If both forks are taken
    else if (PhiloStatus[philID].left == 1 && PhiloStatus[philID].right == 1) {
        printf("Philosopher %d completed his dinner\n", philID + 1);
        PhiloStatus[philID].left = PhiloStatus[philID].right = 10;

        int otherFork = philID - 1;
        if (otherFork == -1) otherFork = n - 1;

        ForkAvail[philID].taken = ForkAvail[otherFork].taken = 0;
        printf("Philosopher %d released Fork %d and Fork %d\n", philID + 1, philID + 1, otherFork + 1);
        completedPhilo++;
    }

    // Left taken, trying for right
    else if (PhiloStatus[philID].left == 1 && PhiloStatus[philID].right == 0) {
        if (philID == n - 1) {  // last philosopher
            if (ForkAvail[philID].taken == 0) {
                ForkAvail[philID].taken = 1;
                PhiloStatus[philID].right = 1;
                printf("Fork %d taken by Philosopher %d\n", philID + 1, philID + 1);
            } else {
                printf("Philosopher %d is waiting for Fork %d\n", philID + 1, philID + 1);
            }
        } else {
            int dupPhilID = philID;
            philID -= 1;
            if (philID == -1) philID = n - 1;
            if (ForkAvail[philID].taken == 0) {
                ForkAvail[philID].taken = 1;
                PhiloStatus[dupPhilID].right = 1;
                printf("Fork %d taken by Philosopher %d\n", philID + 1, dupPhilID + 1);
            } else {
                printf("Philosopher %d is waiting for Fork %d\n", dupPhilID + 1, philID + 1);
            }
        }
    }

    // Nothing taken yet
    else if (PhiloStatus[philID].left == 0) {
        if (philID == n - 1) {
            if (ForkAvail[philID - 1].taken == 0) {
                ForkAvail[philID - 1].taken = 1;
                PhiloStatus[philID].left = 1;
                printf("Fork %d taken by Philosopher %d\n", philID, philID + 1);
            } else {
                printf("Philosopher %d is waiting for Fork %d\n", philID + 1, philID);
            }
        } else {
            if (ForkAvail[philID].taken == 0) {
                ForkAvail[philID].taken = 1;
                PhiloStatus[philID].left = 1;
                printf("Fork %d taken by Philosopher %d\n", philID + 1, philID + 1);
            } else {
                printf("Philosopher %d is waiting for Fork %d\n", philID + 1, philID + 1);
            }
        }
    }
}

int main() {
    for (i = 0; i < n; i++) {
        ForkAvail[i].taken = 0;
        PhiloStatus[i].left = 0;
        PhiloStatus[i].right = 0;
    }

    while (completedPhilo < n) {
        for (i = 0; i < n; i++) {
            goForDinner(i);
        }
        printf("\nTill now, number of philosophers who completed dinner: %d\n\n", completedPhilo);
    }

    return 0;
}

//13. MVT memory management techniques
#include <stdio.h>

void main() {
    int total_memory, process_memory, remaining_memory, num_processes, i;

    printf("Enter the total memory capacity: ");
    scanf("%d", &total_memory);

    printf("Enter the number of processes: ");
    scanf("%d", &num_processes);

    remaining_memory = total_memory;

    for (i = 0; i < num_processes; i++) {
        printf("\nEnter memory required for process %d: ", i + 1);
        scanf("%d", &process_memory);

        if (process_memory <= remaining_memory) {
            printf("Memory allocated for process %d: %d\n", i + 1, process_memory);
            remaining_memory -= process_memory;
            printf("Remaining memory: %d\n", remaining_memory);
        } else {
            printf("Memory not allocated for process %d (Insufficient memory)\n", i + 1);
        }

        printf("External fragmentation after process %d: %d\n", i + 1, remaining_memory);
    }
}

//14. FIFO page replacement
#include <stdio.h>

int main() {
    int incomingStream[] = {4, 1, 2, 4, 5};
    int pageFaults = 0;
    int frames = 3;
    int pages = sizeof(incomingStream) / sizeof(incomingStream[0]);
    int temp[frames];
    int i, j, k, pos = 0, flag;

    // Initialize frames with -1 (empty)
    for (i = 0; i < frames; i++) {
        temp[i] = -1;
    }

    printf("Incoming\tFrame 1\t\tFrame 2\t\tFrame 3\n");

    for (i = 0; i < pages; i++) {
        flag = 0;

        // Check if page is already in frame (hit)
        for (j = 0; j < frames; j++) {
            if (temp[j] == incomingStream[i]) {
                flag = 1; // hit
                break;
            }
        }

        // If not found â†’ page fault
        if (flag == 0) {
            temp[pos] = incomingStream[i];
            pos = (pos + 1) % frames; // FIFO queue logic
            pageFaults++;
        }

        // Print current frame status
        printf("%d\t\t", incomingStream[i]);
        for (k = 0; k < frames; k++) {
            if (temp[k] != -1)
                printf("%d\t\t", temp[k]);
            else
                printf("-\t\t");
        }
        printf("\n");
    }

    printf("\nTotal Page Faults: %d\n", pageFaults);
    return 0;
}


//15.fcfs disk scheduling 
#include <stdio.h>

void fcfs_disk_scheduling(int queue[], int head, int n) {
    double seek_time = 0.0;
    int distance = 0;

    printf("\nStarting Head: %d", head);
    printf("\nQueue Sequence:");

    // Display the queue
    for (int i = 0; i < n; i++) {
        printf(" %d", queue[i]);
    }

    // Calculate total seek time
    for (int i = 0; i < n; i++) {
        distance = queue[i] - head;
        if (distance < 0)
            distance = -distance; // Take absolute value

        seek_time += distance;
        head = queue[i]; // Move head to current request
    }

    // Display results
    printf("\nTotal Seek Time: %.2lf", seek_time);
    printf("\nAverage Seek Time: %.2lf\n", seek_time / n);
}

int main() {
    int queue[] = {64, 12, 42, 19, 62, 32, 16, 86};
    int n = sizeof(queue) / sizeof(queue[0]);
    int head = 25;

    fcfs_disk_scheduling(queue, head, n);

    return 0;
}
